[default]
root_dir = ${appenv:root_dir}
corpus_dir = ${root_dir}/corpus

[cli]
apps = list: ${cli_config_default:apps}, show_config_cli, app
cleanups = list: ${cli_config_default:cleanups}, show_config_cli, app

[log_cli]
format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
loggers = dict: {
  'uic.dsprov.assess': 'info',
  'zensols.nlp.score': 'info',
  'zensols.datdesc.desc': 'info'}

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/escape.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf

[config_cli]
expect = False

[config_imp]
type = import
config_files = list:
  ^{override},
  ^{config_path},
  resource(zensols.mednlp): resources/default.conf,
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deepnlp): resources/default.conf,
  resource(zensols.mimic): resources/default.conf,
  resource(zensols.mimicsid): resources/default.conf,
  resource(uic.dsprov): resources/default.conf,
  ^{override},
  ^{config_path},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/decorator.conf,
  resource(zensols.nlp): resources/score.yml,
  resource(zensols.deeplearn): resources/obj.conf,
  resource(zensols.deepnlp): resources/obj.conf,
  resource(zensols.deepnlp): resources/wordembed.conf,
  resource(zensols.deepnlp): resources/score.yml,
  resource(zensols.mednlp): resources/lang.conf,
  resource(zensols.mednlp): resources/filter-medical.conf,
  resource(zensols.mednlp): resources/install.conf,
  resource(zensols.mimic): resources/obj.conf,
  resource(zensols.mimic): resources/decorator.conf,
  resource(zensols.mimicsid): resources/obj.conf,
  resource(zensols.spanmatch): resources/obj.yml,
  resource(uic.dsprov): resources/obj.yml,
  ^{override},
  ^{config_path}

[config_import]
references = list: conf_esc, package, default

[app]
class_name = uic.dsprov.Application
log_conf = instance: log_cli
corpus = application(zensols.mimicsid): mimic_corpus
anon_resource = application(zensols.mimicsid): mimicsid_anon_resource
reader = instance: dsprov_reader
writer = instance: dsprov_writer
dsanon_stash = instance: dsprov_dsanon_stash
admission_similarity_assessor = instance: dsprov_admission_similarity_assessor
extractor = instance: dsprov_anon_extractor
temporary_dir = path: ~/Desktop

[app_decorator]
option_excludes = set:
  config_factory, log_conf, corpus, anon_resource, reader, writer, dsanon_stash,
  admission_similarity_assessor, extractor, temporary_dir
option_overrides = dict: {
  'output_path': {'long_name': 'out', 'short_name': 'o', 'metavar': '<FILE|DIR>'},
  'limit': {'short_name': 'n'},
  'out_format': {'long_name': 'format', 'short_name': 'f'},
  'include_annotator': {'long_name': 'annotator', 'short_name': None},
  'include_text': {'long_name': 'text', 'short_name': None},
  'include_sections': {'long_name': 'section', 'short_name': None}}
mnemonic_overrides = dict: {
  'export_general': 'export',
  'find_text_in_notes': 'find',
  'write_template': 'template',
  'write_templates': 'templates',
  'write_annotation': 'anon',
  'write_issues': 'issues',
  'write_annotator_sheet': 'anasign',
  'write_medsecid_annotation_totals': 'totals',
  'write_annotator_counts': 'counts',
  'extract_annotations': 'extract',
  'sentence_coverage': 'sentstat',
  'save_excel': 'excel',
  'save_csv': 'csv'}
